name: Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build:
    runs-on: ${{ matrix.OS }}
    strategy:
      matrix:
        include:
          - OS: ubuntu-latest
            PYTHON_VERSION: 3.10.10
            BUILD_CMD: |
                export PYTHONHASHSEED=42
                export BUILD_FILE_NAME=key-manager-${RELEASE_VERSION}-linux-amd64;
                mkdir ${BUILD_FILE_NAME};
                poetry run pyinstaller \
                  --onefile \
                  --hidden-import multiaddr.codecs.uint16be \
                  --hidden-import multiaddr.codecs.idna \
                  --collect-data key_manager \
                  --add-data ./key_manager/abis:key_manager/abis/ \
                  --add-data ./key_manager/word_lists:key_manager/word_lists/ \
                  --name key-manager \
                  --distpath ./${BUILD_FILE_NAME} \
                  ./key_manager/main.py;
                tar -zcvf ${BUILD_FILE_NAME}.tar.gz ./${BUILD_FILE_NAME};
                mkdir /tmp/artifacts;
                cp ${BUILD_FILE_NAME}.tar.gz /tmp/artifacts;
                sha256sum ${BUILD_FILE_NAME}.tar.gz | head -c 64 > /tmp/artifacts/${BUILD_FILE_NAME}.sha256;

          - OS: macos-12
            PYTHON_VERSION: 3.10.10
            BUILD_CMD: |
              export PYTHONHASHSEED=42
              export BUILD_FILE_NAME=key-manager-${RELEASE_VERSION}-darwin-amd64;
              mkdir ${BUILD_FILE_NAME};
              poetry run pyinstaller \
                  --onefile \
                  --hidden-import multiaddr.codecs.uint16be \
                  --hidden-import multiaddr.codecs.idna \
                  --collect-data key_manager \
                  --add-data ./key_manager/abis:key_manager/abis/ \
                  --add-data ./key_manager/word_lists:key_manager/word_lists/ \
                  --name key-manager \
                  --distpath ./${BUILD_FILE_NAME} \
                  ./key_manager/main.py;
              tar -zcvf ${BUILD_FILE_NAME}.tar.gz ./${BUILD_FILE_NAME};
              mkdir /tmp/artifacts;
              cp ${BUILD_FILE_NAME}.tar.gz /tmp/artifacts;
              shasum -a 256 ${BUILD_FILE_NAME}.tar.gz | head -c 64 > /tmp/artifacts/${BUILD_FILE_NAME}.sha256

          - OS: windows-latest
            PYTHON_VERSION: 3.10.10
            BUILD_CMD: |
              $RELEASE_VERSION = $env:GITHUB_REF.replace('refs/tags/', '')
              $BUILD_FILE_NAME = "key-manager-" + $RELEASE_VERSION + "-windows-amd64"
              $BUILD_FILE_NAME_PATH = ".\" + $BUILD_FILE_NAME
              poetry run pyinstaller --onefile --hidden-import multiaddr.codecs.uint16be --hidden-import multiaddr.codecs.idna --collect-data key_manager ./key_manager/main.py --name key-manager --distpath $BUILD_FILE_NAME_PATH
              poetry run pyinstaller `
                  --onefile `
                  --hidden-import multiaddr.codecs.uint16be `
                  --hidden-import multiaddr.codecs.idna `
                  --collect-data key_manager `
                  --add-data "./key_manager/abis;key_manager/abis/" `
                  --add-data "./key_manager/word_lists;key_manager/word_lists/" `
                  --name key-manager `
                  --distpath ./${BUILD_FILE_NAME} `
                  ./key_manager/main.py;
              $ZIP_FILE_NAME = $BUILD_FILE_NAME + ".zip"
              Compress-Archive -Path $BUILD_FILE_NAME_PATH -DestinationPath $ZIP_FILE_NAME
              mkdir \tmp\artifacts
              copy $ZIP_FILE_NAME \tmp\artifacts\
              $CHECKSUM_FILE_NAME_PASH = "\tmp\artifacts\"  + $BUILD_FILE_NAME + ".sha256"
              certUtil -hashfile $ZIP_FILE_NAME SHA256 | findstr /i /v "SHA256" | findstr /i /v "CertUtil" > $CHECKSUM_FILE_NAME_PASH

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.PYTHON_VERSION }}

      - name: Install Poetry
        uses: Gr1N/setup-poetry@v8
        with:
          poetry-version: "1.3.2"

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Build executable for ${{ matrix.OS }}
        env:
          RELEASE_VERSION: ${{ steps.get_version.outputs.VERSION }}
        run: ${{ matrix.BUILD_CMD }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.OS }}
          path: /tmp/artifacts/*
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: /tmp/artifacts

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: /tmp/artifacts

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          fail_on_unmatched_files: true
          files: |
            /tmp/artifacts/ubuntu-latest/key-manager-${{ steps.get_version.outputs.VERSION }}-linux-amd64.tar.gz
            /tmp/artifacts/ubuntu-latest/key-manager-${{ steps.get_version.outputs.VERSION }}-linux-amd64.sha256
            /tmp/artifacts/macos-11/key-manager-${{ steps.get_version.outputs.VERSION }}-darwin-amd64.tar.gz
            /tmp/artifacts/macos-11/key-manager-${{ steps.get_version.outputs.VERSION }}-darwin-amd64.sha256
            /tmp/artifacts/windows-latest/key-manager-${{ steps.get_version.outputs.VERSION }}-windows-amd64.zip
            /tmp/artifacts/windows-latest/key-manager-${{ steps.get_version.outputs.VERSION }}-windows-amd64.sha256
